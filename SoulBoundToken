// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import {
    IERC721,
    ERC721
} from "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract SoulBoundToken is ERC721, Ownable {

    uint256 private _tokenIdCounter;

    mapping(address => bool) public minters;

    modifier onlyMinter() {
        require(minters[msg.sender], "Caller is not a minter");
        _;
    }

    constructor( string memory name_, string memory symbol_) ERC721(name_, symbol_) Ownable(msg.sender){}

        // Function to grant minting permission to an address
    function grantMinter(address _minter) public onlyOwner {
        minters[_minter] = true;
    }

    // Function to revoke minting permission from an address
    function revokeMinter(address _minter) public onlyOwner {
        minters[_minter] = false;
    }

    // Mint function callable only by addresses with minting permission
    function mint(address _to, uint256 _tokenId) public onlyMinter {
        _safeMint(_to, _tokenId);
    }

    function transferFrom(address from, address to, uint256 tokenId) public virtual override {
        revert("Your ID cannot be transfered");
    }

    function burn(uint256 tokenId) external {
        require(ownerOf(tokenId) == msg.sender, "Only the owner of the ID can burn it.");
        super._burn(tokenId);
    }


}
